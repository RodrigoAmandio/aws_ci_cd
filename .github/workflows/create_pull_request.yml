# A cria√ß√£o do PR request deve ser um workflow separado do CI
# Isso ocorre para que as altera√ß√µes locais sejam enviadas definitivamente ao reposit√≥rio remoto
# Posteriormente, o PR pode ser criado
name: Create Pull Request

on:
  workflow_run:
    workflows: ["CI Checking"] # Dispara este workflow assim que o workflow de CI for conclu√≠do
    types:
      - completed

jobs:
  create-pr:
    # Executa este job somente se o workflow de CI tiver sido conclu√≠do com sucesso
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
      # Etapa 1: Buscar o nome da branch que originou o workflow de CI e exportar como vari√°vel
      - name: Obter informa√ß√µes do workflow de origem
        id: get_workflow_info
        run: |
          echo "Buscando detalhes do workflow que disparou este..."
          # Usa a API do GitHub para obter a branch de origem do workflow de CI
          gh api \
            /repos/${{ github.repository }}/actions/runs/${{ github.event.workflow_run.id }} \
            --jq '.head_branch' > branch.txt

          # L√™ o nome da branch e define como sa√≠da para ser reutilizado
          BRANCH_NAME=$(cat branch.txt)
          echo "head_branch=$BRANCH_NAME" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Etapa 2: Fazer checkout da branch original (a branch que iniciou o CI)
      - name: Checkout da branch de origem
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.get_workflow_info.outputs.head_branch }}
          fetch-depth: 0

      # Etapa 3: Autenticar a CLI do GitHub para poder executar comandos como criar PR
      - name: Autenticar CLI do GitHub
        run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      # Etapa 4: Verificar se j√° existe um PR desta branch para a branch develop 
      # - name: Verificar se PR j√° existe
      #   id: check_pr
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     BRANCH_NAME: ${{ steps.get_workflow_info.outputs.head_branch }}
      #     REPO_OWNER: ${{ github.repository_owner }}
      #   run: |
      #     echo "Verifica se existe um PR da branch: $BRANCH_NAME para develop"
      #     echo "${BRANCH_NAME}"

      #     # Verifica se j√° existe um PR com head = BRANCH_NAME e base = develop
      #     if gh pr view --head "${BRANCH_NAME}" --base develop --json url > pr.json 2>/dev/null; then
      #       echo "PR j√° existe."
      #       echo "exists=true" >> $GITHUB_OUTPUT
      #     else
      #       echo "PR ainda n√£o existe."
      #       echo "exists=false" >> $GITHUB_OUTPUT
      #     fi

      - name: Verificar se PR com t√≠tulo existe
        id: check_pr_title
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH_NAME: ${{ steps.get_workflow_info.outputs.head_branch }}
          TARGET_TITLE: "PR autom√°tico: ${{ steps.get_workflow_info.outputs.head_branch }}"
        run: |
          echo "Verificando se existe PR com o t√≠tulo: '$TARGET_TITLE'"

          # Lista todos os PRs abertos direcionados para develop
          gh pr list --base develop --state open --json title > prs.json

          # Verifica se algum PR tem o t√≠tulo exato
          if jq -e --arg title "$TARGET_TITLE" '.[] | select(.title == $title)' prs.json > /dev/null; then
            echo "PR j√° existe com esse t√≠tulo."
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "PR ainda n√£o existe com esse t√≠tulo."
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      # Etapa 5: Criar o PR apenas se ele ainda n√£o existir com as aspas em todos os valores que podem conter caracteres especiais
      - name: Criar Pull Request (caso n√£o exista)
        if: steps.check_pr.outputs.exists == 'false'
        shell: bash
        env:
          BRANCH_NAME: ${{ steps.get_workflow_info.outputs.head_branch }}  # üëà Correctly interpolated in YAML
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
        run: |
          echo "Branch: [$BRANCH_NAME]"
          echo "Criando PR da branch: $BRANCH_NAME para develop"

          gh pr create \
            --base "develop" \
            --head "$BRANCH_NAME" \
            --title "PR autom√°tico: $BRANCH_NAME" \
            --body "Este PR foi criado automaticamente ap√≥s os testes passarem."
